<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="adam">

    <material name="red">
        <color rgba="0.8 0 0 1" />
    </material>

    <material name="gray">
        <color rgba="0.7 0.7 0.7 1" />
    </material>

    <material name="green">
        <color rgba="0 0.8 0 1" />
    </material>

    <material name="blue">
        <color rgba="0 0 0.8 1" />
    </material>

    <xacro:property name="body_length" value="0.3" />
    <xacro:property name="body_width" value="0.2" />
    <xacro:property name="body_height" value="0.1" />
    <xacro:property name="body_mass" value="1.0" />

    <xacro:property name="lidar_radius" value="0.05" />
    <xacro:property name="lidar_length" value="0.06" />
    <xacro:property name="lidar_mass" value="0.17" />

    <xacro:property name="wheel_radius" value="0.04" />
    <xacro:property name="wheel_length" value="0.02" />
    <xacro:property name="wheel_mass" value="0.05" />

    <xacro:property name="caster_radius" value="${wheel_radius / 2}" />
    <xacro:property name="caster_mass" value="0.03" />

    <xacro:property name="holder_radius" value="0.01" />
    <xacro:property name="holder_length" value="0.15" />
    <xacro:property name="holder_mass" value="0.1" />

    <xacro:property name="tray_length" value="${body_length * 0.9}" />
    <xacro:property name="tray_width" value="${body_width * 0.9}" />
    <xacro:property name="tray_height" value="0.02" />
    <xacro:property name="tray_mass" value="0.1" />

    <link name="base_link" />

    <xacro:macro name="box_inertia" params="mass height width depth">
        <inertial>
            <mass value="${mass}" />
            <origin xyz="0 0 0" />
            <inertia ixx="${1/12 * mass * (depth*depth + height*height)}" ixy="0.0" ixz="0.0"
                iyy="${1/12 * mass * (width*width + height*height)}" iyz="0.0"
                izz="${1/12 * mass * (width*width + depth*depth)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="mass radius height">
        <inertial>
            <mass value="${mass}" />
            <origin xyz="0 0 0" />
            <inertia ixx="${1/12 * mass * (3*(radius*radius) + height*height)}" ixy="0.0" ixz="0.0"
                iyy="${1/12 * mass * (3*(radius*radius) + height*height)}" iyz="0.0"
                izz="${0.5 * mass * radius*radius}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="mass radius">
        <inertial>
            <mass value="${mass}" />
            <origin xyz="0 0 0" />
            <inertia ixx="${0.4 * mass * radius*radius}" ixy="0.0" ixz="0.0"
                iyy="${0.4 * mass * radius*radius}" iyz="0.0"
                izz="${0.4 * mass * radius*radius}" />
        </inertial>
    </xacro:macro>

    <link name="body">
        <xacro:box_inertia mass="${body_mass}" height="${body_height}" width="${body_width}"
            depth="${body_length}" />
        <visual>
            <geometry>
                <box size="${body_length} ${body_width} ${body_height}" />
            </geometry>
            <material name="red" />
        </visual>
        <collision>
            <geometry>
                <box size="${body_length} ${body_width} ${body_height}" />
            </geometry>
        </collision>
    </link>

    <joint name="body_joint" type="fixed">
        <parent link="base_link" />
        <child link="body" />
        <origin xyz="0 0 ${body_height / 2 + wheel_radius}" />
    </joint>

    <link name="lidar">
        <xacro:cylinder_inertia mass="${lidar_mass} " radius="${lidar_radius}"
            height="${lidar_length}" />
        <visual>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_length}" />
            </geometry>
            <material name="blue" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_length}" />
            </geometry>
        </collision>
    </link>

    <joint name="lidar_joint" type="fixed">
        <parent link="body" />
        <child link="lidar" />
        <origin xyz="0 0 ${(lidar_length + body_height) / 2}" />
        <axis xyz="0 0 1" />
    </joint>

    <xacro:macro name="wheel" params="pos_name pos_val">
        <link name="${pos_name}_wheel">
            <xacro:cylinder_inertia mass="${wheel_mass} " radius="${wheel_radius}"
                height="${wheel_length}" />
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin rpy="${22 / 7 / 2} 0 0" />
                <material name="green" />
            </visual>
            <collision>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin rpy="${22 / 7 / 2} 0 0" />
            </collision>
        </link>

        <joint name="${pos_name}_wheel_joint" type="continuous">
            <parent link="body" />
            <child link="${pos_name}_wheel" />
            <origin
                xyz="${-body_length / 2 + wheel_radius} ${pos_val * (body_width + wheel_length) / 2 } ${-body_height / 2}" />
            <axis xyz="0 1 0" />
        </joint>
    </xacro:macro>

    <xacro:wheel pos_name="left" pos_val="1" />
    <xacro:wheel pos_name="right" pos_val="-1" />

    <link name="caster_wheel">
        <xacro:sphere_inertia mass="${caster_mass}" radius="${caster_radius}" />
        <visual>
            <geometry>
                <sphere radius="${caster_radius}" />
            </geometry>
            <material name="green" />
        </visual>
        <collision>
            <geometry>
                <sphere radius="${caster_radius}" />
            </geometry>
        </collision>
    </link>

    <joint name="caster_wheel_joint" type="continuous">
        <parent link="body" />
        <child link="caster_wheel" />
        <origin xyz="${body_length / 2 - caster_radius} 0 ${- body_height / 2 - caster_radius}" />
    </joint>

    <xacro:macro name="holder" params="name x y">
        <link name="${name}_holder">
            <xacro:cylinder_inertia mass="${holder_mass} " radius="${holder_radius}"
                height="${holder_length}" />
            <visual>
                <geometry>
                    <cylinder radius="${holder_radius}" length="${holder_length}" />
                </geometry>
                <material name="gray" />
            </visual>
            <collision>
                <geometry>
                    <cylinder radius="${holder_radius}" length="${holder_length}" />
                </geometry>
            </collision>
        </link>

        <joint name="${name}_holder_joint" type="fixed">
            <parent link="body" />
            <child link="${name}_holder" />
            <origin
                xyz="${x * (body_length * 0.45 - holder_radius * 2)} ${y * (body_width * 0.45 - holder_radius * 2)} ${(body_height + holder_length) / 2}" />
        </joint>

    </xacro:macro>

    <xacro:holder name="right_front" x="1" y="-1" />
    <xacro:holder name="left_front" x="1" y="1" />
    <xacro:holder name="right_back" x="-1" y="-1" />
    <xacro:holder name="left_back" x="-1" y="1" />

    <link name="tray">
        <xacro:box_inertia mass="${tray_mass}" height="${tray_height}" width="${tray_width}"
            depth="${tray_length}" />
        <visual>
            <geometry>
                <box size="${tray_length} ${tray_width} ${tray_height}" />
            </geometry>
            <material name="red" />
        </visual>
        <collision>
            <geometry>
                <box size="${tray_length} ${tray_width} ${tray_height}" />
            </geometry>
        </collision>
    </link>

    <joint name="tray_joint" type="fixed">
        <parent link="right_back_holder" />
        <child link="tray" />
        <origin
            xyz="${tray_length / 2 - holder_radius * 2} ${tray_width / 2 - holder_radius * 2} ${holder_length / 2 - tray_height / 2}" />
    </joint>

  <gazebo reference="lidar">
    <sensor name='gpu_lidar' type='gpu_lidar'>
      <pose relative_to='lidar'>
        0 0 0 0 0 0
      </pose>
      <topic>scan</topic>
      <update_rate>10</update_rate>
      <ray>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.05</stddev>
        </noise>
        <scan>
          <horizontal>
            <samples>640</samples>
            <resolution>1</resolution>
            <min_angle>-1.396263</min_angle>
            <max_angle>1.396263</max_angle>
          </horizontal>
          <vertical>
            <samples>1</samples>
            <resolution>0.01</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.08</min>
          <max>20.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <always_on>1</always_on>
      <visualize>true</visualize>
    </sensor>

    <sensor name="imu_sensor" type="imu">
      <pose relative_to='lidar'>
        0 0 0 0 0 0
      </pose>

      <always_on>1</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>imu</topic>

      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>

          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
            </noise>
          </y>

          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>

        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>

          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>

          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <gazebo>
    <plugin filename="gz-sim-imu-system"
      name="gz::sim::systems::Imu">
    </plugin>

    <plugin
        filename="gz-sim-sensors-system"
        name="gz::sim::systems::Sensors">
        <render_engine>ogre2</render_engine>
    </plugin>

    <plugin filename="libgz_ros2_control-system.so"
    name="gz_ros2_control::GazeboSimROS2ControlPlugin">
        <parameters>$(find neu_lidar)/config/controllers.yaml</parameters>
    </plugin>
  </gazebo>

  <ros2_control name="GazeboSystem" type="system">
    <hardware>
        <plugin>gz_ros2_control/GazeboSimSystem</plugin>
    </hardware>
    <joint name="right_wheel_joint">
        <command_interface name="velocity">
            <param name="min">-10</param>
            <param name="max">10</param>
        </command_interface>
        <state_interface name="velocity" />
        <state_interface name="position" />
    </joint>
    <joint name="left_wheel_joint">
        <command_interface name="velocity">
            <param name="min">-10</param>
            <param name="max">10</param>
        </command_interface>
        <state_interface name="position" />
        <state_interface name="velocity" />
    </joint>
  </ros2_control>
</robot>
